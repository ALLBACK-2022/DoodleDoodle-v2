plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

jib {
	from {
		image = "openjdk:11-jre-slim"
	}
	to {
		image = "chokeong1/backend"
		tags = ["latest"]
	}
	container {
		jvmFlags = ["-Xms128m", "-Xmx128m"]
	}
}

group = 'com.doodledoodle'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'com.github.f4b6a3:ulid-creator:5.2.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2:1.4.200'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.kafka:spring-kafka-test'


	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

bootJar {
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}/html5")
	into 'static/docs'
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.named('test') {
	useJUnitPlatform()
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}